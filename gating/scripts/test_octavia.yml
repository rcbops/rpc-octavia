---
# Copyright 2014-2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Test Octavia
  hosts: localhost
  user: root
  gather_facts: false
  vars:
    env:
      OS_ENDPOINT_TYPE: internalURL
      OS_INTERFACE: internalURL
      OS_USERNAME: admin
      OS_PASSWORD: "{{ keystone_auth_admin_password }}"
      OS_PROJECT_NAME: admin
      OS_TENANT_NAME: admin
      OS_AUTH_URL: "http://{{ internal_lb_vip_address }}:5000/v3"
      OS_NO_CACHE: 1
      OS_USER_DOMAIN_NAME: Default
      OS_PROJECT_DOMAIN_NAME: Default
      OS_REGION_NAME: RegionOne
    requirements_git_install_branch: 99d99fe2e22f4a464415eb0064313b6ebd36906f #HEAD of "stable/pike" as of 4.10.2017
    internal_lb_vip_address: 172.29.236.100
    amp_image_file_dir: "{{ working_dir }}/amp-image/{{ rpc_release }}"

  tasks:
    - name: Gather variables
      include_vars: "{{ item }}"
      with_items:
        - '/etc/ansible/roles/os_octavia/defaults/main.yml'
        - '/opt/rpc-octavia/playbooks/vars/cert_vars.yml'
        - '/opt/rpc-octavia/playbooks/group_vars/octavia_all.yml'
        - '/opt/rpc-octavia/playbooks/group_vars/all/octavia.yml'
    - name: Install pip requirements
      pip:
        name: "{{ item }}"
        state: "{{ octavia_pip_package_state }}"
        extra_args: "-c https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?id={{ requirements_git_install_branch | regex_replace(' #.*$','') }} --isolated"
      register: install_packages
      until: install_packages|success
      retries: 5
      delay: 2
      with_items:
        - "python-neutronclient"
        - "shade"
    - name: Create a loadbalancer
      shell: >
         neutron lbaas-loadbalancer-create --name test-lb public-subnet
      environment: "{{ env }}"
    - name: Wait until LB is up
      shell: >
        neutron lbaas-loadbalancer-show test-lb | grep ONLINE
      environment: "{{ env }}"
      register: lb_up
      until: lb_up|success
      retries: 50
      delay: 10
    - name: Create a listener
      shell: >
        neutron lbaas-listener-create  --loadbalancer test-lb --protocol HTTP --protocol-port 80 --name listener
      environment: "{{ env }}"
    - name: Curl the Listener
      shell: >
        curl -s -o /dev/null -w "%{http_code}" http://`neutron lbaas-loadbalancer-show test-lb | awk '/ vip_address / {print $4}'`
      environment: "{{ env }}"
      register: http_status_code
    - name: Check that we got 503
      assert:
        that:
          - "'503' in http_status_code.stdout"
    - name: Delete listener
      shell: >
        neutron lbaas-listener-delete listener
      environment: "{{ env }}"
    - name: Delete LoadBalancer
      shell: >
        neutron lbaas-loadbalancer-delete test-lb
      environment: "{{ env }}"
      register: lb_deleted
      until: lb_deleted|success
      retries: 10
      delay: 15