---
# Copyright 2014-2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Test Octavia
  hosts: localhost
  user: root
  gather_facts: false
  vars:
    env:
      OS_ENDPOINT_TYPE: internalURL
      OS_INTERFACE: internalURL
      OS_USERNAME: admin
      OS_PASSWORD: "{{ keystone_auth_admin_password }}"
      OS_PROJECT_NAME: admin
      OS_TENANT_NAME: admin
      OS_AUTH_URL: "http://{{ internal_lb_vip_address }}:5000/v3"
      OS_NO_CACHE: 1
      OS_USER_DOMAIN_NAME: Default
      OS_PROJECT_DOMAIN_NAME: Default
      OS_REGION_NAME: RegionOne
      OS_IDENTITY_API_VERSION: 3
      OS_AUTH_VERSION: 3
    requirements_git_install_branch: 99d99fe2e22f4a464415eb0064313b6ebd36906f #HEAD of "stable/pike" as of 4.10.2017
    internal_lb_vip_address: 172.29.236.100
    amp_image_file_dir: "{{ working_dir }}/amp-image/{{ rpc_release }}"

  tasks:
    - name: Gather variables
      include_vars: "{{ item }}"
      with_items:
        - '/etc/ansible/roles/os_octavia/defaults/main.yml'
        - '/opt/rpc-octavia/playbooks/vars/main.yml'
        - '/opt/rpc-octavia/playbooks/group_vars/octavia_all.yml'
        - '/opt/rpc-octavia/playbooks/group_vars/all/octavia.yml'
    - name: Install pip requirements
      pip:
        name: "{{ item }}"
        state: "{{ octavia_pip_package_state }}"
        extra_args: "-c https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?id={{ requirements_git_install_branch | regex_replace(' #.*$','') }} --isolated"
      register: install_packages
      until: install_packages|success
      retries: 5
      delay: 2
      with_items:
        - "python-neutronclient"
        - "python-glanceclient"
        - "shade"
        - "python-octaviaclient"
        - "python-openstackclient"
    - name: Delete image from glance
      shell: >-
          openstack image delete amphora-x64-haproxy
      environment: "{{ env }}"
      ignore_errors: true
    - name: Upload image to glance
      shell: >-
          glance image-create --name amphora-x64-haproxy --visibility private --disk-format qcow2 \
            --container-format bare --tags octavia-amphora-image <{{ amp_image_file_dir }}/amphora-x64-haproxy.qcow2 \
            && touch {{ octavia_system_home_folder }}/image
      args:
        creates: "{{ octavia_system_home_folder }}/image"
      environment: "{{ env }}"
    - name: Create a loadbalancer
      shell: >
         openstack --debug loadbalancer create  --name test-lb --vip-subnet-id public-subnet
      environment: "{{ env }}"
    - name: Wait until LB is active
      shell: >
         openstack loadbalancer show test-lb -c provisioning_status -f value
      environment: "{{ env }}"
      register: lb_active
      until: lb_active.stdout == "ACTIVE"
      failed_when: lb_active.stdout == "ERROR"
      retries: 100
      delay: 10
    - name: Create a listener
      shell: >
       openstack loadbalancer listener create --protocol HTTP --protocol-port 80 --name listener test-lb
      environment: "{{ env }}"
    - name: Wait until Listener is active
      shell: >
         openstack loadbalancer show test-lb -c provisioning_status -f value
      environment: "{{ env }}"
      register: lb_active
      until: lb_active.stdout == "ACTIVE"
      failed_when: lb_active.stdout == "ERROR"
      retries: 20
      delay: 10
    - name: Run Show
      shell: >
        openstack loadbalancer show test-lb
      environment: "{{ env }}"
    - name: Register VIP IP # this is likley changing with a newer version of octaviaclient
      shell: >
         openstack loadbalancer show test-lb -c vip_address -f value
      environment: "{{ env }}"
      register: vip_output
    - name: Set VIP fact
      set_fact:
        vip: "{{ vip_output.stdout }}"
    - name: Test the Listener
      uri:
        url: "http://{{ vip }}"
        status_code: 503
    - name: Delete LoadBalancer
      shell: >
        openstack loadbalancer delete --cascade test-lb
      environment: "{{ env }}"
      register: lb_deleted
      until: lb_deleted|success
      retries: 10
      delay: 15
